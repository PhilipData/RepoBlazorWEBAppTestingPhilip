@page "/Account/ConfirmEmail"

@using BlazorWEBAppTestingPhilip.Data
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using QRCoder
@using System.Globalization
@using System.Text.Encodings.Web
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager


@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Confirm Email</PageTitle>

<h1>Confirm Email</h1>
<StatusMessage Message="@statusMessage" />

@if (_imageSource != null)
{
    <div>
        Please download Google Authenticator and scan the QR Code below to register your app
        <br />
        <img src="@_imageSource" style="width:300px;height:300px" />
    </div>
}

@code {
    private const string AuthenticatorUriFormat = "otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6";
    private string? statusMessage;
    private string? _imageSource;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserId == null || Code == null)
        {
            RedirectManager.RedirectTo("/");
            return;
        }

        var user = await UserManager.FindByIdAsync(UserId);
        if (user == null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = $"Error loading user with ID {UserId}";
        }
        else
        {
            var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
            var result = await UserManager.ConfirmEmailAsync(user, code);
            statusMessage = result.Succeeded ? "Thank you for confirming your email." : "Error confirming your email.";
            if (result.Succeeded)
            {
                await LoadSharedKeyAndQrCodeUriAsync(user);
            }
        }
    }

    private async Task LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user)
    {
        // Load the authenticator key & QR code URI to display on the form
        var unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        if (string.IsNullOrEmpty(unformattedKey))
        {
            await UserManager.ResetAuthenticatorKeyAsync(user);
            unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        }

        var qrCodeUri = GenerateQrCodeUri(user.Email, unformattedKey);
        using (QRCodeGenerator qrGenerator = new QRCodeGenerator())
        using (QRCodeData qrCodeData = qrGenerator.CreateQrCode(qrCodeUri, QRCodeGenerator.ECCLevel.Q))
        using (PngByteQRCode qrCode = new PngByteQRCode(qrCodeData))
        {
            byte[] qrCodeImage = qrCode.GetGraphic(20);
            string base64Image = Convert.ToBase64String(qrCodeImage);
            _imageSource = $"data:image/png;base64,{base64Image}"; // Set the image source
        }
    }

    private string GenerateQrCodeUri(string email, string unformattedKey)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            AuthenticatorUriFormat,
            UrlEncoder.Default.Encode("BlazorWEBAppTestingPhilip"), // Use your app name or issuer
            UrlEncoder.Default.Encode(email),
            unformattedKey);
    }
}
